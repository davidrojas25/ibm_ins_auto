---
- name: parser meta data
  parser_metadata:
    version: 1.0
    command: show ip arp
    network_os: ios

- name: match sections
  pattern_match:
    regex: "^\\S+\\s+(\\d+\\.\\d+\\.\\d+\\.\\d+)"
    match_all: true
    match_greedy: true
  register: section

- name: match arp entry
  pattern_group:
    - name: match address
      pattern_match:
        regex: "^\\S+\\s+(\\d+\\.\\d+\\.\\d+\\.\\d+)"
        content: "{{ item }}"
      register: ip_address

    - name: match age
      pattern_match:
        regex: "^\\S+\\s+\\d+\\.\\d+\\.\\d+\\.\\d+\\s+(\\S+)"
        content: "{{ item }}"
      register: age

    - name: match hardware address
      pattern_match:
        regex: "[\\d,\\-]\\s+(\\w+\\.\\w+\\.\\w+)"
        content: "{{ item }}"
      register: type

    - name: match hardware address type
      pattern_match:
        regex: "[\\d,\\-]\\s+\\w+\\.\\w+\\.\\w+\\s+(\\S+)"
        content: "{{ item }}"
      register: address_type

    - name: match interface
      pattern_match:
        regex: "([A-Z]\\w+\\d\\/\\d[\\s,\\d]*[\\/,\\s]*[\\d,\\s]*)"
        content: "{{ item }}"
      register: interface

  loop: "{{ section }}"
  register: arp_entries

- name: generate json data structure
  json_template:
    template:
      - key: "{{ item.ip_address.matches.0 }}"
        object:
          - key: config
            object:
              - key: ip_address
                value: "{{ item.ip_address.matches.0 }}"
              - key: age
                value: "{{ item.age.matches.0 }}"
              - key: type
                value: "{{ item.type.matches.0 }}"
              - key: address_type
                value: "{{ item.address_type.matches.0 }}"
              - key: interface
                value: "{{ item.interface.matches.0 }}"

  loop: "{{ arp_entries }}"
  export: true
  #export_as: "{{ export_type }}"
  register: arp_facts